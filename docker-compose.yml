version: '3.8'

services:
  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: meteor-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API service
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: meteor-backend
    ports:
      - "5000:5000"
    environment:
      - REDIS_URL=redis://redis:6379
      - NASA_API_KEY=${NASA_API_KEY:-DEMO_KEY}
      - USGS_API_BASE=${USGS_API_BASE:-https://earthquake.usgs.gov/fdsnws/event/1}
      - FLASK_DEBUG=${FLASK_DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key-change-in-production}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-jwt-secret-key-change-me}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000}
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./logs:/app/logs

  # Frontend service (if running separately)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: frontend-build
    container_name: meteor-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:5000
      - REACT_APP_NASA_API_KEY=${NASA_API_KEY:-DEMO_KEY}
    depends_on:
      - backend
    restart: unless-stopped
    stdin_open: true
    tty: true

  # Monitoring service (Prometheus)
  prometheus:
    image: prom/prometheus:latest
    container_name: meteor-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deployment/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: meteor-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/grafana-dashboards:/var/lib/grafana/dashboards
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    driver: bridge